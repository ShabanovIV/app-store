{"version":3,"file":"448.fbd159436bf333eab0d7.js","mappings":"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","sources":["webpack://app-store/./src/shared/hooks/useSuccessHandler.ts","webpack://app-store/./src/features/ProfileForm/model/useProfile.ts","webpack://app-store/./src/features/ProfileForm/ui/ProfileForm.tsx","webpack://app-store/./src/features/ProfileForm/lib/useProfileRules.ts","webpack://app-store/./src/features/ProfilePwdForm/model/useProfilePwdForm.ts","webpack://app-store/./src/features/ProfilePwdForm/ui/ProfilePwdForm.tsx","webpack://app-store/./src/features/ProfilePwdForm/lib/useProfilePwdRules.ts","webpack://app-store/./src/widgets/ProfileSwitcher/ui/ProfileSwitcher.tsx","webpack://app-store/./src/widgets/ProfileSwitcher/ui/ProfileSwitcher.module.scss?fe6c","webpack://app-store/./src/pages/ProfilePage/ProfilePage.tsx","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/shared/hooks/useMessage.ts","webpack://app-store/./src/shared/lib/formValidation/useRules.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { useMessage } from './useMessage';\n\ninterface UseSuccessHandlerProps {\n  isSuccess: boolean;\n  mess: string;\n}\n\nexport const useSuccessHandler = ({ isSuccess, mess }: UseSuccessHandlerProps) => {\n  const { showSuccess } = useMessage();\n\n  useEffect(() => {\n    if (isSuccess) {\n      showSuccess(mess);\n    }\n  }, [isSuccess, showSuccess]);\n};\n","import { FormInstance } from 'antd';\nimport { useProfileQuery, useUpdateProfileMutation } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useProfile = (form: FormInstance<FieldType>) => {\n  const { data, refetch, isLoading, isSuccess, error } = useProfileQuery();\n  const [updateProfile, { isLoading: isUpdating, isSuccess: isUpdateSuccess, error: updateError }] =\n    useUpdateProfileMutation();\n  useErrorHandler({ form, error });\n  useErrorHandler({ form, error: updateError });\n  useSuccessHandler({\n    isSuccess: isUpdateSuccess,\n    mess: 'Data saved successfully',\n  });\n\n  const update = async (name: string) => {\n    await updateProfile({ name });\n  };\n\n  return {\n    data,\n    refetch,\n    update,\n    isLoading,\n    isUpdating,\n    isUpdateSuccess,\n    isSuccess,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { Button, Form, FormProps, Input, Spin } from 'antd';\nimport { useProfileRules } from '../lib/useProfileRules';\nimport { useProfile } from '../model/useProfile';\nimport { FieldType } from '../types/fields';\n\nexport const ProfileForm: React.FC = () => {\n  const getProfileRules = useProfileRules();\n  const [isChanges, setIsChanges] = useState(false);\n  const [form] = Form.useForm();\n  const { data, update, isUpdateSuccess, isLoading, isUpdating } = useProfile(form);\n\n  useEffect(() => {\n    if (data) {\n      form.setFieldsValue(data);\n    }\n  }, [data, form]);\n\n  useEffect(() => {\n    if (isUpdateSuccess) {\n      setIsChanges(false);\n    }\n  }, [isUpdateSuccess]);\n\n  const handleChange = () => {\n    setIsChanges(true);\n  };\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    update(values.name);\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"ProfileForm\"\n      labelAlign=\"left\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item<FieldType> label=\"Full Name\" name=\"name\" rules={getProfileRules('name')}>\n        <Input onChange={handleChange} placeholder=\"John Doe\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Email\" name=\"email\">\n        <Input readOnly />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Date of Registration\" name=\"signUpDate\">\n        <Input readOnly />\n      </Form.Item>\n\n      <Button\n        type=\"primary\"\n        htmlType=\"submit\"\n        style={{ width: '100%' }}\n        disabled={isLoading || isUpdating || !isChanges}\n      >\n        {isLoading ? <Spin /> : 'Save'}\n      </Button>\n    </Form>\n  );\n};\n","import { Rule } from 'antd/es/form';\nimport { FieldType } from '../types/fields';\n\nexport type AllowedFields = Exclude<keyof FieldType, 'email' | 'signUpDate'>;\n\nexport const useProfileRules = () => {\n  return (field: AllowedFields): Rule[] => {\n    const rules: Record<AllowedFields, Rule[]> = {\n      name: [\n        { required: true, message: 'Please enter your username' },\n        { min: 3, max: 20, message: 'Username must be between 3 and 20 characters' },\n        {\n          pattern: /^[a-zA-Z0-9_]+$/,\n          message: 'Username can only contain letters, numbers, and underscores',\n        },\n      ],\n    };\n\n    return rules[field];\n  };\n};\n","import { FormInstance } from 'antd';\nimport { useChangePasswordMutation } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useProfilePassword = (form: FormInstance<FieldType>) => {\n  const [changePassword, { isLoading, isSuccess, error }] = useChangePasswordMutation();\n  useErrorHandler({ form, error });\n  useSuccessHandler({\n    isSuccess,\n    mess: 'Password successfully changed',\n  });\n\n  const changePass = async (password: string, newPassword: string) => {\n    await changePassword({ password, newPassword });\n  };\n\n  return {\n    changePass,\n    isLoading,\n    isSuccess,\n  };\n};\n","import { useEffect } from 'react';\nimport { Button, Form, FormProps, Input, Spin } from 'antd';\nimport { useProfilePwdRules } from '../lib/useProfilePwdRules';\nimport { useProfilePassword } from '../model/useProfilePwdForm';\nimport { FieldType } from '../types/fields';\n\ninterface ProfilePwdFormProps {\n  onSuccess?: () => void;\n}\n\nexport const ProfilePwdForm: React.FC<ProfilePwdFormProps> = ({ onSuccess }) => {\n  const [form] = Form.useForm();\n  const getPwdRules = useProfilePwdRules(form);\n  const { changePass, isLoading, isSuccess } = useProfilePassword(form);\n\n  useEffect(() => {\n    if (isSuccess && onSuccess) {\n      onSuccess();\n    }\n  }, [isSuccess]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    changePass(values.password, values.newPassword);\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"ProfilePwdForm\"\n      labelAlign=\"left\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item<FieldType>\n        label=\"Current Password\"\n        name=\"password\"\n        rules={getPwdRules('password')}\n      >\n        <Input.Password placeholder=\"Enter current password\" />\n      </Form.Item>\n\n      <Form.Item<FieldType>\n        label=\"New Password\"\n        name=\"newPassword\"\n        rules={getPwdRules('newPassword')}\n      >\n        <Input.Password placeholder=\"Enter new password\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Confirm password\" name=\"confirm\" rules={getPwdRules('confirm')}>\n        <Input.Password placeholder=\"Confirm password\" />\n      </Form.Item>\n\n      <Button type=\"primary\" htmlType=\"submit\" style={{ width: '100%' }} disabled={isLoading}>\n        {isLoading ? <Spin /> : 'Change'}\n      </Button>\n    </Form>\n  );\n};\n","import { FormInstance } from 'antd';\nimport { Rule } from 'antd/es/form';\nimport { Fields, useRules } from 'src/shared/lib/formValidation/useRules';\nimport { FieldType } from '../types/fields';\n\nexport const useProfilePwdRules = (form: FormInstance<FieldType>) => {\n  const getRules = useRules();\n  return (field: keyof FieldType): Rule[] => {\n    const rules: Record<keyof FieldType, Rule[]> = {\n      password: getRules(Fields.password),\n      newPassword: getRules(Fields.password),\n      confirm: [\n        { required: true, message: 'Please confirm your password' },\n        {\n          validator: (_, value, callback) => {\n            if (value && value !== form.getFieldValue('newPassword')) {\n              callback('Passwords do not match');\n            } else {\n              callback();\n            }\n          },\n        },\n      ],\n    };\n\n    return rules[field];\n  };\n};\n","import { useState } from 'react';\nimport { Button, Space, Typography, Divider } from 'antd';\nimport { ProfileForm } from 'src/features/ProfileForm';\nimport { ProfilePwdForm } from 'src/features/ProfilePwdForm';\nimport styles from './ProfileSwitcher.module.scss';\n\nconst { Text } = Typography;\n\nexport const ProfileSwitcher: React.FC = () => {\n  const [isProfile, setIsProfile] = useState(true);\n\n  const handleClick = () => {\n    setIsProfile((prev) => !prev);\n  };\n\n  return (\n    <div className={styles.profileCard}>\n      <h4 className={styles.title}>{isProfile ? 'Personal data' : 'Password change'}</h4>\n\n      {isProfile ? <ProfileForm /> : <ProfilePwdForm />}\n\n      <Divider />\n\n      <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n        <Text type=\"secondary\">{isProfile ? 'Want to change your password?' : ''}</Text>\n        <Button type=\"link\" onClick={handleClick}>\n          {isProfile ? 'Password change' : 'Back to Profile'}\n        </Button>\n      </Space>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"profileCard\":\"ProfileSwitcher-module_profileCard-iu57k\",\"title\":\"ProfileSwitcher-module_title-mlJp_\"};","import { ProfileSwitcher } from 'src/widgets/ProfileSwitcher/';\n\nconst ProfilePage: React.FC = () => {\n  return <ProfileSwitcher />;\n};\n\nexport default ProfilePage;\n","import { useEffect } from 'react';\nimport { FormInstance } from 'antd';\nimport { useMessage } from 'src/shared/hooks/useMessage';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const { showError } = useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        showError(joinedMessage);\n      }\n    }\n  }, [error, form]);\n};\n","import { useContext } from 'react';\nimport { MessageContext } from 'src/shared/providers/MessageContext';\n\nexport const useMessage = () => {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessage должен использоваться внутри <MessageProvider>');\n  }\n  return context;\n};\n","import { Rule } from 'antd/es/form';\n\nexport const Fields = {\n  email: 'email',\n  password: 'password',\n} as const;\n\nexport type Field = (typeof Fields)[keyof typeof Fields];\n\nexport const useRules = () => {\n  return (field: Field): Rule[] => {\n    const rules: Record<Field, Rule[]> = {\n      email: [\n        { required: true, message: 'Please input your email' },\n        {\n          pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n          message: 'Please enter a valid email address',\n        },\n      ],\n      password: [{ required: true, message: 'Please enter your password' }],\n    };\n\n    return rules[field];\n  };\n};\n"],"names":["useSuccessHandler","isSuccess","mess","showSuccess","useMessage","useEffect","ProfileForm","isChanges","setIsChanges","useState","form","useForm","data","update","isUpdateSuccess","isLoading","isUpdating","refetch","error","updateProfile","updateError","useErrorHandler","u","name","useProfile","setFieldsValue","labelAlign","labelCol","span","wrapperCol","onFinish","values","autoComplete","Item","label","rules","field","required","message","min","max","pattern","onChange","placeholder","readOnly","type","htmlType","style","width","disabled","ProfilePwdForm","onSuccess","getPwdRules","getRules","useRules","password","newPassword","confirm","validator","_","value","callback","getFieldValue","useProfilePwdRules","changePass","changePassword","useProfilePassword","Password","Text","ProfileSwitcher","isProfile","setIsProfile","className","direction","align","onClick","prev","showError","setFields","joinedMessage","context","useContext","Error","Fields","email"],"sourceRoot":""}
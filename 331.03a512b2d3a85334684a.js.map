{"version":3,"file":"331.03a512b2d3a85334684a.js","mappings":"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","sources":["webpack://app-store/./src/features/forms/ProductForm/lib/getProductRules.ts","webpack://app-store/./src/features/forms/ProductForm/model/useUpdate.ts","webpack://app-store/./src/features/forms/ProductForm/ui/ProductCategory.tsx","webpack://app-store/./src/features/forms/ProductForm/model/useGet.ts","webpack://app-store/./src/features/forms/ProductForm/model/useCreate.ts","webpack://app-store/./src/widgets/editors/ProductEditor/ui/ProductEditor.tsx","webpack://app-store/./src/widgets/editors/ProductEditor/ui/ProductEditor.module.scss?b096","webpack://app-store/./src/pages/ProductEditPage/ProductEditPage.tsx","webpack://app-store/./src/pages/ProductEditPage/ProductEditPage.module.scss?a18e","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/shared/hooks/useMessage.ts","webpack://app-store/./src/shared/hooks/useSuccessHandler.ts","webpack://app-store/./src/shared/ui/RenderList/RenderList.module.scss?5ddc","webpack://app-store/./src/shared/ui/RenderList/RenderList.tsx"],"sourcesContent":["import { Rule } from 'antd/es/form';\nimport { FieldType } from '../types/fields';\n\nexport type AllowedFields = Exclude<\n  keyof FieldType,\n  'id' | 'desc' | 'oldPrice' | 'price' | 'categoryId'\n>;\n\nexport const getProductRules = (field: AllowedFields) => {\n  const rules: Record<AllowedFields, Rule[]> = {\n    name: [\n      { required: true, message: 'Please enter a name' },\n      { min: 3, max: 20, message: 'Name must be between 3 and 20 characters' },\n      {\n        pattern: /^[a-zA-Z0-9\\s]+$/,\n        message: 'Name can only contain letters, numbers, and spaces',\n      },\n    ],\n    photo: [\n      {\n        pattern: /^(https?:\\/\\/.*\\.(?:png|jpg|jpeg|gif|webp|svg))$/i,\n        message: 'Invalid photo URL',\n        validateTrigger: 'onSubmit',\n      },\n    ],\n  };\n\n  return rules[field];\n};\n","import { FormInstance } from 'antd';\nimport { useUpdateProductMutation } from 'src/entities/Product';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useUpdate = (form: FormInstance<FieldType>) => {\n  const [updateProduct, { isLoading: isUpdating, isSuccess: isUpdateSuccess, error }] =\n    useUpdateProductMutation();\n  useErrorHandler({ form, error });\n  useSuccessHandler({\n    isSuccess: isUpdateSuccess,\n    mess: 'Data saved successfully',\n  });\n\n  const update = async () => {\n    const body = form.getFieldsValue();\n    await updateProduct(body);\n  };\n\n  return {\n    update,\n    isUpdating,\n    isUpdateSuccess,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { Button, Form, Input, Spin } from 'antd';\nimport { getProductRules } from '../lib/getProductRules';\nimport { useCreate } from '../model/useCreate';\nimport { useGet } from '../model/useGet';\nimport { useUpdate } from '../model/useUpdate';\nimport { FieldType } from '../types/fields';\n\nexport const Actions = {\n  create: 'create',\n  update: 'update',\n} as const;\n\nexport type Action = (typeof Actions)[keyof typeof Actions];\n\ninterface ProductFormProps {\n  action: Action;\n  productId: string;\n  onCreated: () => void;\n}\n\nexport const ProductForm: React.FC<ProductFormProps> = ({ action, productId, onCreated }) => {\n  const [isChanges, setIsChanges] = useState(action === Actions.create);\n  const [form] = Form.useForm();\n  const { data, isFetching } = useGet(action === Actions.create, productId, form);\n  const { update, isUpdating, isUpdateSuccess } = useUpdate(form);\n  const { create, isCreating, isCreatingSuccess } = useCreate(form);\n\n  useEffect(() => {\n    if (data) {\n      form.setFieldsValue(data.data[0]);\n    }\n  }, [data, form]);\n\n  useEffect(() => {\n    if (isCreatingSuccess) {\n      onCreated();\n    }\n  }, [isCreatingSuccess, onCreated]);\n\n  useEffect(() => {\n    if (isUpdateSuccess) {\n      setIsChanges(false);\n    }\n  }, [isUpdateSuccess]);\n\n  return (\n    <Form\n      form={form}\n      name=\"ProductForm\"\n      labelAlign=\"left\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      onFinish={action === Actions.update ? update : create}\n      autoComplete=\"off\"\n    >\n      <Form.Item<FieldType> label=\"Id\" name=\"id\">\n        <Input readOnly hidden={action === Actions.create} />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Name\" name=\"name\" rules={getProductRules('name')}>\n        <Input onChange={() => setIsChanges(true)} placeholder=\"Snowboarding\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Photo source\" name=\"photo\" rules={getProductRules('photo')}>\n        <Input onChange={() => setIsChanges(true)} placeholder=\"URL\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Description\" name=\"desc\">\n        <Input.TextArea onChange={() => setIsChanges(true)} placeholder=\"Description\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Old price\" name=\"oldPrice\">\n        <Input onChange={() => setIsChanges(true)} placeholder=\"Old price\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Price\" name=\"price\">\n        <Input onChange={() => setIsChanges(true)} placeholder=\"Price\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"CategoryId\" name=\"categoryId\">\n        <Input onChange={() => setIsChanges(true)} placeholder=\"CategoryId\" />\n      </Form.Item>\n\n      <Button\n        type=\"primary\"\n        htmlType=\"submit\"\n        style={{ width: '100%' }}\n        disabled={isFetching || isUpdating || !isChanges}\n      >\n        {isUpdating || isCreating ? <Spin /> : action === Actions.update ? 'Save' : 'Create'}\n      </Button>\n    </Form>\n  );\n};\n","import { FormInstance } from 'antd';\nimport { useGetProductsQuery } from 'src/entities/Product';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useGet = (skip: boolean, productId: string, form: FormInstance<FieldType>) => {\n  const { data, refetch, isFetching, isSuccess, error } = useGetProductsQuery(\n    {\n      ids: [productId],\n    },\n    { skip },\n  );\n  useErrorHandler({ form, error });\n\n  return {\n    data,\n    refetch,\n    isFetching,\n    isSuccess,\n  };\n};\n","import { FormInstance } from 'antd';\nimport { useCreateProductMutation } from 'src/entities/Product';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useCreate = (form: FormInstance<FieldType>) => {\n  const [createProduct, { isLoading: isCreating, isSuccess: isCreatingSuccess, error }] =\n    useCreateProductMutation();\n  useErrorHandler({ form, error });\n  useSuccessHandler({\n    isSuccess: isCreatingSuccess,\n    mess: 'Product created successfully',\n  });\n\n  const create = async () => {\n    const body = form.getFieldsValue();\n    await createProduct(body);\n  };\n\n  return {\n    create,\n    isCreating,\n    isCreatingSuccess,\n  };\n};\n","import { useCallback, useState } from 'react';\nimport { Button, Divider, Modal, Space, Spin } from 'antd';\nimport {\n  Product,\n  ProductCard,\n  useDeleteProductMutation,\n  useGetAllProductsQuery,\n} from 'src/entities/Product';\nimport { Action, Actions, ProductForm } from 'src/features/forms/ProductForm/';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { IRenderItem } from 'src/shared/ui/RenderList/IRenderItem';\nimport { RenderList } from 'src/shared/ui/RenderList/RenderList';\nimport styles from './ProductEditor.module.scss';\n\ninterface ConvertProps {\n  product: Product;\n  onClick?: (id: string) => void;\n}\n\nexport const ProductEditor: React.FC = () => {\n  const [actionProduct, setActionProduct] = useState<{\n    action: Action;\n    product: Product;\n  } | null>(null);\n  const { data, error: getAllError } = useGetAllProductsQuery();\n  const [deleteProduct, { isLoading: isDeleting, isSuccess, error }] = useDeleteProductMutation();\n  useErrorHandler({ error: getAllError });\n  useErrorHandler({ error });\n  useSuccessHandler({ isSuccess, mess: 'Product delete successfully' });\n\n  const footerItem = useCallback(\n    (product: Product) => {\n      return (\n        <Space style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n          <Button\n            onClick={() => {\n              setActionProduct({ action: Actions.update, product });\n            }}\n          >\n            Edit\n          </Button>\n          <Button danger onClick={async () => await deleteProduct(product.id)}>\n            Delete\n          </Button>\n        </Space>\n      );\n    },\n    [deleteProduct],\n  );\n\n  const convertProductToItem = useCallback(\n    ({ product, onClick }: ConvertProps): IRenderItem => ({\n      key: product.id,\n      render: () => (\n        <ProductCard\n          product={product}\n          onClick={onClick ? () => onClick(product.id) : undefined}\n          footer={() => (footerItem ? footerItem(product) : undefined)}\n        />\n      ),\n    }),\n    [footerItem],\n  );\n\n  const items = data?.data.map((product) => convertProductToItem({ product })) ?? [];\n\n  const handleCreate = () => {\n    setActionProduct({\n      action: Actions.create,\n      product: {\n        id: '',\n        name: '',\n        createdAt: new Date(Date.now()),\n        updatedAt: new Date(Date.now()),\n        price: 0,\n        commandId: '',\n      },\n    });\n  };\n\n  const handleCreated = () => {\n    setActionProduct(null);\n  };\n\n  return (\n    <div className={styles.container}>\n      {actionProduct && (\n        <Modal\n          title={<p>Edit product</p>}\n          open={Boolean(actionProduct)}\n          loading={false}\n          onCancel={() => setActionProduct(null)}\n          footer={<></>}\n        >\n          <ProductForm\n            action={actionProduct!.action}\n            productId={actionProduct!.product.id}\n            onCreated={handleCreated}\n          />\n        </Modal>\n      )}\n      <div>\n        <Button onClick={handleCreate}>Create new product</Button>\n      </div>\n      <Divider />\n      {isDeleting && <Spin />}\n      {isDeleting && <Divider />}\n      <RenderList items={items} />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProductEditor-module_container-HHjGH\"};","import { ProductEditor } from 'src/widgets/editors/ProductEditor';\nimport styles from './ProductEditPage.module.scss';\n\nconst ProductPage: React.FC = () => {\n  return (\n    <div className={styles.page}>\n      <ProductEditor />\n    </div>\n  );\n};\n\nexport default ProductPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"ProductEditPage-module_page-Kbjhx\"};","import { useEffect } from 'react';\nimport { FormInstance } from 'antd';\nimport { useMessage } from 'src/shared/hooks/useMessage';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const { showError } = useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        showError(joinedMessage);\n      }\n    }\n  }, [error, form, showError]);\n};\n","import { useContext } from 'react';\nimport { MessageContext } from 'src/shared/providers/MessageContext';\n\nexport const useMessage = () => {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessage должен использоваться внутри <MessageProvider>');\n  }\n  return context;\n};\n","import { useEffect } from 'react';\nimport { useMessage } from './useMessage';\n\ninterface UseSuccessHandlerProps {\n  isSuccess: boolean;\n  mess: string;\n}\n\nexport const useSuccessHandler = ({ isSuccess, mess }: UseSuccessHandlerProps) => {\n  const { showSuccess } = useMessage();\n\n  useEffect(() => {\n    if (isSuccess) {\n      showSuccess(mess);\n    }\n  }, [isSuccess, mess, showSuccess]);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"RenderList-module_list-BF_R0\",\"listGrid\":\"RenderList-module_listGrid-VEEh9\",\"listItem\":\"RenderList-module_listItem-d2Xxn\",\"empty\":\"RenderList-module_empty-VeKxm\"};","import React, { forwardRef, memo } from 'react';\nimport { IRenderItem } from './IRenderItem';\nimport styles from './RenderList.module.scss';\n\nexport interface IRenderListProps {\n  isGrid?: boolean;\n  items: IRenderItem[];\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n  onLastItemChanged?: (key: string) => void;\n}\n\nexport const RenderList: React.FC<IRenderListProps> = ({\n  isGrid,\n  items,\n  lastItemRef,\n  onLastItemChanged,\n}) => {\n  if (items.length === 0) {\n    return <div className={styles.empty}>No items to display</div>;\n  }\n\n  return (\n    <ul className={isGrid === undefined || isGrid ? styles.listGrid : styles.list}>\n      {items.map((item, index) => (\n        <ItemMemo\n          key={item.key}\n          item={item}\n          ref={setRefForLast({ items, index, lastItemRef, onLastItemChanged })}\n        />\n      ))}\n    </ul>\n  );\n};\n\ntype ListItemProps = {\n  item: IRenderItem;\n};\n\nconst ItemRef = forwardRef<HTMLLIElement, ListItemProps>(({ item }, ref) => (\n  <li id={item.key} ref={ref} className={styles.listItem}>\n    {item.render()}\n  </li>\n));\nItemRef.displayName = 'ItemRef';\n\nconst ItemMemo = memo(ItemRef);\n\nconst setRefForLast = ({\n  items,\n  index,\n  lastItemRef,\n  onLastItemChanged,\n}: {\n  items: IRenderItem[];\n  index: number;\n  onLastItemChanged?: (key: string) => void;\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n}) => {\n  return (element: HTMLLIElement | null) => {\n    if (index === items.length - 1 && lastItemRef) {\n      lastItemRef.current = element;\n      if (onLastItemChanged) {\n        onLastItemChanged(items[items.length - 1].key);\n      }\n    }\n  };\n};\n"],"names":["getProductRules","field","name","required","message","min","max","pattern","photo","validateTrigger","Actions","ProductForm","action","productId","onCreated","isChanges","setIsChanges","useState","form","useForm","data","isFetching","skip","refetch","isSuccess","error","ids","useErrorHandler","u","useGet","update","isUpdating","isUpdateSuccess","updateProduct","isLoading","useSuccessHandler","mess","body","getFieldsValue","useUpdate","create","isCreating","isCreatingSuccess","createProduct","useCreate","useEffect","setFieldsValue","labelAlign","labelCol","span","wrapperCol","onFinish","autoComplete","Item","label","readOnly","hidden","rules","onChange","placeholder","TextArea","type","htmlType","style","width","disabled","ProductEditor","actionProduct","setActionProduct","getAllError","deleteProduct","isDeleting","footerItem","useCallback","product","display","justifyContent","alignItems","onClick","danger","id","convertProductToItem","key","render","Product","undefined","footer","items","map","className","title","open","Boolean","loading","onCancel","createdAt","Date","now","updatedAt","price","commandId","RenderList","showError","setFields","joinedMessage","useMessage","context","useContext","Error","showSuccess","isGrid","lastItemRef","onLastItemChanged","length","item","index","ItemMemo","ref","setRefForLast","ItemRef","forwardRef","displayName","memo","element","current"],"sourceRoot":""}
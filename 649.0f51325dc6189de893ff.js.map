{"version":3,"file":"649.0f51325dc6189de893ff.js","mappings":"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","sources":["webpack://app-store/./src/features/SignInForm/model/useSignIn.ts","webpack://app-store/./src/features/SignInForm/ui/SignInForm.tsx","webpack://app-store/./src/features/SignUpForm/model/useSignUp.ts","webpack://app-store/./src/features/SignUpForm/ui/SignUpForm.tsx","webpack://app-store/./src/features/SignUpForm/lib/useSignUpRules.ts","webpack://app-store/./src/widgets/AuthSwitcher/ui/AuthSwitcher.tsx","webpack://app-store/./src/widgets/AuthSwitcher/ui/AuthSwitcher.module.scss?5919","webpack://app-store/./src/pages/AuthPage/AuthPage.tsx","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/shared/lib/formValidation/useRules.ts"],"sourcesContent":["import { FormInstance } from 'antd';\nimport { useSigninMutation } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useSignIn = (form: FormInstance<FieldType>) => {\n  const [signin, { isLoading, isSuccess, error }] = useSigninMutation();\n  const { errorElement } = useErrorHandler<FieldType>({ form, error });\n\n  const signIn = async (email: string, password: string) => {\n    await signin({ email, password });\n  };\n\n  return {\n    signIn,\n    errorElement,\n    isLoading,\n    isSuccess,\n  };\n};\n","import { useEffect } from 'react';\nimport { Button, Form, FormProps, Input, Spin } from 'antd';\nimport { Fields, useRules } from 'src/shared/lib/formValidation/useRules';\nimport { useSignIn } from '../model/useSignIn';\nimport { FieldType } from '../types/fields';\n\ninterface SignInFormProps {\n  onSuccess: () => void;\n}\n\nexport const SignInForm: React.FC<SignInFormProps> = ({ onSuccess }) => {\n  const [form] = Form.useForm();\n  const getRules = useRules();\n  const { signIn, errorElement, isLoading, isSuccess } = useSignIn(form);\n\n  useEffect(() => {\n    if (isSuccess) {\n      onSuccess();\n    }\n  }, [isSuccess]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    if (values.email && values.password) {\n      signIn(values.email, values.password);\n    }\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"SignInForm\"\n      labelCol={{ span: 8 }}\n      labelAlign=\"left\"\n      wrapperCol={{ span: 16 }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      {errorElement}\n      <Form.Item<FieldType> label=\"Email\" name=\"email\" rules={getRules(Fields.email)}>\n        <Input />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Password\" name=\"password\" rules={getRules(Fields.password)}>\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item label={null}>\n        <Button style={{ width: '100%' }} type=\"primary\" htmlType=\"submit\">\n          Sign In\n        </Button>\n      </Form.Item>\n      {isLoading && <Spin>Loading...</Spin>}\n    </Form>\n  );\n};\n","import { FormInstance } from 'antd';\nimport { useSignupMutation } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useSignUp = (form: FormInstance<FieldType>) => {\n  const [signup, { isLoading, isSuccess, error }] = useSignupMutation();\n  const { errorElement } = useErrorHandler<FieldType>({ form, error });\n\n  const signUp = async (email: string, password: string) => {\n    await signup({ email, password });\n  };\n\n  return {\n    signUp,\n    errorElement,\n    isLoading,\n    isSuccess,\n  };\n};\n","import { useEffect } from 'react';\nimport { Button, Form, FormProps, Input, Spin } from 'antd';\nimport { useSignUpRules } from '../lib/useSignUpRules';\nimport { useSignUp } from '../model/useSignUp';\nimport { FieldType } from '../types/fields';\n\ninterface SignUpFormProps {\n  onSuccess: () => void;\n}\n\nexport const SignUpForm: React.FC<SignUpFormProps> = ({ onSuccess }) => {\n  const [form] = Form.useForm<FieldType>();\n  const getRules = useSignUpRules(form);\n  const { signUp, errorElement, isLoading, isSuccess } = useSignUp(form);\n\n  useEffect(() => {\n    if (isSuccess) {\n      onSuccess();\n    }\n  }, [isSuccess]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    if (values.email && values.password) {\n      signUp(values.email, values.password);\n    }\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"SignUpForm\"\n      labelAlign=\"left\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      {errorElement}\n      <Form.Item<FieldType> label=\"Email\" name=\"email\" rules={getRules('email')}>\n        <Input />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Password\" name=\"password\" rules={getRules('password')}>\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Confirm\" name=\"confirm\" rules={getRules('confirm')}>\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item label={null}>\n        <Button disabled={isLoading} style={{ width: '100%' }} type=\"primary\" htmlType=\"submit\">\n          {isLoading ? <Spin tip={<div>Loading...</div>} /> : 'Join'}\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n","import { FormInstance, Rule } from 'antd/es/form';\nimport { Fields, useRules } from 'src/shared/lib/formValidation/useRules';\nimport { FieldType } from '../types/fields';\n\nexport const useSignUpRules = (form: FormInstance<FieldType>) => {\n  const getRules = useRules();\n  return (field: keyof FieldType): Rule[] => {\n    const rules: Record<keyof FieldType, Rule[]> = {\n      email: getRules(Fields.email),\n      password: getRules(Fields.password),\n      confirm: [\n        { required: true, message: 'Please confirm your password' },\n        {\n          validator: (_, value, callback) => {\n            if (value && value !== form.getFieldValue('password')) {\n              callback('Passwords do not match');\n            } else {\n              callback();\n            }\n          },\n        },\n      ],\n    };\n\n    return rules[field];\n  };\n};\n","import { useState } from 'react';\nimport { Button, Space, Typography, Divider } from 'antd';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { SignInForm } from 'src/features/SignInForm';\nimport { SignUpForm } from 'src/features/SignUpForm';\nimport styles from './AuthSwitcher.module.scss';\n\nconst { Text } = Typography;\n\nexport const AuthSwitcher: React.FC = () => {\n  const [isSignIn, setIsSignIn] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const handleClick = () => {\n    setIsSignIn((prev) => !prev);\n  };\n\n  const handleSuccess = () => {\n    const from = location.state?.from || '/';\n    navigate(from, { replace: true });\n  };\n\n  return (\n    <div className={styles.authCard}>\n      <h4 className={styles.title}>\n        {isSignIn ? 'Log in to your account' : 'Enter your email and create a password'}\n      </h4>\n\n      <Divider />\n\n      {isSignIn ? (\n        <SignInForm onSuccess={handleSuccess} />\n      ) : (\n        <SignUpForm onSuccess={handleSuccess} />\n      )}\n\n      <Divider />\n\n      <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n        <Text type=\"secondary\">\n          {isSignIn ? \"Don't have an account?\" : 'Already have an account?'}\n        </Text>\n        <Button type=\"link\" onClick={handleClick}>\n          {isSignIn ? 'Join' : 'Sign In'}\n        </Button>\n      </Space>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"authCard\":\"AuthSwitcher-module_authCard-TUn7g\",\"title\":\"AuthSwitcher-module_title-um9uJ\"};","import { AuthSwitcher } from 'src/widgets/AuthSwitcher/';\n\nconst AuthPage: React.FC = () => {\n  return <AuthSwitcher />;\n};\n\nexport default AuthPage;\n","import { useEffect } from 'react';\nimport { FormInstance, message } from 'antd';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  form: FormInstance<TFields>;\n  error: unknown;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      form.setFields(extractFormErrors(error));\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        messageApi.error(joinedMessage);\n      }\n    }\n  }, [error, form, messageApi]);\n\n  return {\n    errorElement: contextHolder,\n  };\n};\n","import { Rule } from 'antd/es/form';\n\nexport const Fields = {\n  email: 'email',\n  password: 'password',\n} as const;\n\nexport type Field = (typeof Fields)[keyof typeof Fields];\n\nexport const useRules = () => {\n  return (field: Field): Rule[] => {\n    const rules: Record<Field, Rule[]> = {\n      email: [\n        { required: true, message: 'Please input your email' },\n        {\n          pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n          message: 'Please enter a valid email address',\n        },\n      ],\n      password: [{ required: true, message: 'Please enter your password' }],\n    };\n\n    return rules[field];\n  };\n};\n"],"names":["SignInForm","onSuccess","form","useForm","getRules","useRules","signIn","errorElement","isLoading","isSuccess","signin","error","useErrorHandler","u","email","password","useSignIn","useEffect","name","labelCol","span","labelAlign","wrapperCol","onFinish","values","autoComplete","Item","label","rules","Password","style","width","type","htmlType","SignUpForm","field","confirm","required","message","validator","_","value","callback","getFieldValue","useSignUpRules","signUp","signup","useSignUp","disabled","tip","Text","AuthSwitcher","isSignIn","setIsSignIn","useState","navigate","location","handleSuccess","from","state","replace","className","direction","align","onClick","prev","messageApi","contextHolder","useMessage","setFields","joinedMessage","Fields","pattern"],"sourceRoot":""}
{"version":3,"file":"607.553347ad4216987a10c9.js","mappings":"2JACA,SAAgB,KAAO,+BAA+B,SAAW,mCAAmC,SAAW,mCAAmC,OAAS,mCCc9IA,EAAyC,EACpDC,SACAC,QACAC,cACAC,wBAEA,GAAqB,IAAjBF,EAAMG,OACR,OAAO,gBAAKC,UAAW,EAAOC,MAAK,iCAGrC,MAAMC,EAAYN,EAAMO,KAAI,CAACC,EAAMC,KACjC,SAACC,EAAgB,CAEfF,KAAMA,EACNG,IAAKC,EAAc,CAAEZ,QAAOS,QAAOP,oBAAmBD,iBAFjDO,EAAKK,OAMd,OAAO,eAAIT,UAAW,GAAG,EAAOU,QAAQf,EAAS,EAAOgB,SAAW,KAAI,SAAGT,GAAe,EAOrFU,GAAW,IAAAC,aAAsD,EAAGT,QAAQG,KAChF,eAAIO,GAAIV,EAAKK,IAAKF,IAAKA,EAAKP,UAAW,EAAOe,SAAQ,SACnDX,EAAKY,aAIVJ,EAASK,YAAc,WAEvB,MAAMX,GAAmB,IAAAY,MAAKN,GAExBJ,EAAgB,EACpBZ,QACAS,QACAP,oBACAD,iBAOQsB,IACFd,IAAUT,EAAMG,OAAS,GAAKF,IAChCA,EAAYuB,QAAUD,EACtBrB,EAAkBF,EAAMA,EAAMG,OAAS,GAAGU,KAC5C,ECJJ,EApD+D,EAAGd,SAAQC,QAAOyB,iBAC/E,MAAOC,EAAaC,IAAkB,IAAAC,UAAS,IACzCC,GAAkB,IAAAC,QAAO,IACzB7B,GAAc,IAAA6B,QAA6B,MAC3CC,GAAsB,IAAAD,SAAO,GAE7BE,GAAqB,IAAAC,cACxBC,IACC,MAAMC,EAAQD,EAAQ,IAClBC,aAAK,EAALA,EAAOC,kBAAmBL,EAAoBP,UAChDO,EAAoBP,SAAU,EAC9BC,IACF,GAEF,CAACA,IA4BH,OAzBA,IAAAY,YAAU,KACR,GAAIX,IAAgBG,EAAgBL,QAClC,OAEAK,EAAgBL,QAAUE,EAG5B,MAAMY,EAAW,IAAIC,qBAAqBP,EAAoB,CAAEQ,UAAW,IAErEC,EAAkBxC,EAAYuB,QAKpC,OAJIiB,GACFH,EAASI,QAAQD,GAGZ,KACDA,GACFH,EAASK,UAAUF,EACrB,CACD,GACA,CAACT,EAAoBN,KAExB,IAAAW,YAAU,KACRN,EAAoBP,SAAU,CAAK,GAClC,CAACE,KAGF,SAAC5B,EAAU,CACTC,OAAQA,EACRC,MAAOA,EACPC,YAAaA,EACbC,kBAAmByB,GAEtB,E,kCCzDH,MCWaiB,EAA4C,EACvDC,WACAC,UACAC,WACAC,aASE,iBAAK5C,UDxBkB,qCCwBU0C,QAPf,KACdA,GACFA,GACF,EAIqD,UAClDD,EAASI,QAAS,gBAAKC,IAAKL,EAASI,MAAOE,IAAKN,EAASO,QAC3D,wBAAKP,EAASO,QACd,UAAC,IAAK,WACHJ,IAAU,SAAC,KAAM,CAACF,QAASE,EAAM,kBACjCD,IACC,SAAC,KAAM,CAACM,QAAM,EAACP,QAASC,EAAQ,0B,cCzB1C,MCSA,EAX+B,KAC7B,MAAM,QAAEO,EAAO,WAAEC,EAAU,aAAEC,EAAY,eAAEC,GDGV,MACjC,MAAMC,GAAc,IAAA5B,QAAiB,KAC9B6B,EAAYC,IAAiB,IAAAhC,UAAS,IACtC0B,EAASO,IAAc,IAAAjC,WAAS,IAChC2B,EAAYO,IAAiB,IAAAlC,UAAwB,KACtD,KAAEmC,EAAI,WAAEC,EAAU,UAAEC,EAAS,MAAEC,EAAK,QAAEC,IAAY,QACtD,CAAEC,WAAY,CAAEC,SARF,GAQuBV,WAAYA,IACjD,CACEW,KAAqB,IAAfX,GAAoBD,EAAYlC,QAAQ+C,SAASZ,MAGrD,aAAEH,IAAiB,EAAAgB,EAAAC,GAAgB,CAAEP,UAErCT,GAAiB,IAAAxB,cAAY,KAC5BqB,IAAWU,GAChBJ,GAAec,GACNA,EAAO,GACd,GACD,CAACpB,EAASU,IA8Bb,OA5BA,IAAA3B,YAAU,KACJ4B,GAAaD,GACfF,EAAc,GAChB,GACC,CAACE,EAAYC,KAEhB,IAAA5B,YAAU,KAEN0B,GACAA,EAAKA,KAAK5D,OAAS,IAClBuD,EAAYlC,QAAQ+C,SAASZ,IAC9BI,EAAKK,WAAWT,aAAeA,GAE/BD,EAAYlC,QAAQmD,KAAKhB,GACzBG,GAAeY,GAAS,IACnBA,KACAX,EAAKA,KAAKxD,KAAKsC,GEjCU,GAClCA,WACAC,UACAE,SACA4B,eAC+B,CAC/B/D,IAAKgC,EAAS3B,GACdE,OAAQ,KACN,SAACwB,EAAY,CACXC,SAAUA,EACVC,QAASA,EAAU,IAAMA,EAAQD,EAAS3B,SAAM2D,EAChD7B,OAAQA,EAAS,IAAMA,EAAOH,EAAS3B,SAAM2D,EAC7C9B,SAAU6B,EAAW,IAAMA,EAAS/B,EAAS3B,SAAM2D,MFsBxCC,CAAqB,CAC1BjC,WACAC,QAAS,IAAMiC,QAAQC,IAAI,YAAYnC,EAASO,wBAI7CW,GAAQA,EAAKA,KAAK5D,OA7Cf,IA8CZ0D,GAAW,EACb,GACC,CAACE,EAAMJ,IAEH,CACLL,UACAC,aACAC,eACAW,UACAV,iBACD,ECzD6DwB,GAC9D,OACE,iBAAK7E,UENmB,sCFMQ,UAC7BoD,GACD,SAAC,EAAkB,CAACzD,QAAQ,EAAMC,MAAOuD,EAAY9B,WAAYgC,KAC/DH,IAAW,cAAGlD,UETkD,gCFS7B,uCAExC,EGNH,EAJ+B,KACtB,SAAC,EAAY,G,oECMf,MAAMoE,EAAkB,EAAYU,OAAMhB,YAC/C,MAAOiB,EAAYC,GAAiB,KAAQC,aAiB5C,OAfA,IAAAhD,YAAU,KACR,GAAI6B,EAAO,EACT,QAAmBA,GAEfgB,GACFA,EAAKI,WAAU,QAAkBpB,IAGnC,MAAMqB,GAAgB,QAA0BrB,GAC5CqB,GACFJ,EAAWjB,MAAMqB,EAErB,IACC,CAACrB,EAAOgB,EAAMC,IAEV,CACL3B,aAAc4B,EACf,C","sources":["webpack://app-store/./src/shared/ui/RenderList/RenderList.module.scss?5ddc","webpack://app-store/./src/shared/ui/RenderList/RenderList.tsx","webpack://app-store/./src/shared/ui/RenderList/RenderListObserver.tsx","webpack://app-store/./src/entities/Category/ui/CategoryCard.module.scss?19e6","webpack://app-store/./src/entities/Category/ui/CategoryCard.tsx","webpack://app-store/./src/features/CategoryList/model/useLoaderCategories.tsx","webpack://app-store/./src/features/CategoryList/ui/CategoryList.tsx","webpack://app-store/./src/entities/Category/ui/convertToRenderItem.tsx","webpack://app-store/./src/features/CategoryList/ui/CategoryList.module.scss?f66d","webpack://app-store/./src/pages/CategoryPage/CategoryPage.tsx","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"RenderList-module_list-BF_R0\",\"listGrid\":\"RenderList-module_listGrid-VEEh9\",\"listItem\":\"RenderList-module_listItem-d2Xxn\",\"fadeIn\":\"RenderList-module_fade-in-KfGGK\"};","import React, { forwardRef, memo, ReactNode } from 'react';\nimport styles from './RenderList.module.scss';\n\nexport interface IRenderItem {\n  key: string;\n  render: () => ReactNode;\n}\n\nexport interface IRenderListProps {\n  isGrid?: boolean;\n  items: IRenderItem[];\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n  onLastItemChanged: (key: string) => void;\n}\n\nexport const RenderList: React.FC<IRenderListProps> = ({\n  isGrid,\n  items,\n  lastItemRef,\n  onLastItemChanged,\n}) => {\n  if (items.length === 0) {\n    return <div className={styles.empty}>No items to display</div>;\n  }\n\n  const memoItems = items.map((item, index) => (\n    <MemoizedListItem\n      key={item.key}\n      item={item}\n      ref={setRefForLast({ items, index, onLastItemChanged, lastItemRef })}\n    />\n  ));\n\n  return <ul className={`${styles.list} ${isGrid ? styles.listGrid : ''}`}>{memoItems}</ul>;\n};\n\ntype ListItemProps<TItem> = {\n  item: TItem;\n};\n\nconst ListItem = forwardRef<HTMLLIElement, ListItemProps<IRenderItem>>(({ item }, ref) => (\n  <li id={item.key} ref={ref} className={styles.listItem}>\n    {item.render()}\n  </li>\n));\n\nListItem.displayName = 'ListItem';\n\nconst MemoizedListItem = memo(ListItem);\n\nconst setRefForLast = ({\n  items,\n  index,\n  onLastItemChanged,\n  lastItemRef,\n}: {\n  items: IRenderItem[];\n  index: number;\n  onLastItemChanged: (key: string) => void;\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n}) => {\n  return (element: HTMLLIElement | null) => {\n    if (index === items.length - 1 && lastItemRef) {\n      lastItemRef.current = element;\n      onLastItemChanged(items[items.length - 1].key);\n    }\n  };\n};\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport { RenderList, IRenderItem } from './RenderList';\n\nexport interface IRenderListObserverProps {\n  isGrid?: boolean;\n  items: IRenderItem[];\n  onLastItem: () => void;\n}\n\nconst RenderListObserver: React.FC<IRenderListObserverProps> = ({ isGrid, items, onLastItem }) => {\n  const [lastItemKey, setLastItemKey] = useState('');\n  const prevLastItemKey = useRef('');\n  const lastItemRef = useRef<HTMLLIElement | null>(null);\n  const hasCalledOnLastItem = useRef(false);\n\n  const handleIntersection = useCallback(\n    (entries: IntersectionObserverEntry[]) => {\n      const entry = entries[0];\n      if (entry?.isIntersecting && !hasCalledOnLastItem.current) {\n        hasCalledOnLastItem.current = true;\n        onLastItem();\n      }\n    },\n    [onLastItem],\n  );\n\n  useEffect(() => {\n    if (lastItemKey === prevLastItemKey.current) {\n      return;\n    } else {\n      prevLastItemKey.current = lastItemKey;\n    }\n\n    const observer = new IntersectionObserver(handleIntersection, { threshold: 1 });\n\n    const currentLastItem = lastItemRef.current; // Сохраняем текущее значение рефа\n    if (currentLastItem) {\n      observer.observe(currentLastItem);\n    }\n\n    return () => {\n      if (currentLastItem) {\n        observer.unobserve(currentLastItem); // Используем сохранённое значение\n      }\n    };\n  }, [handleIntersection, lastItemKey]);\n\n  useEffect(() => {\n    hasCalledOnLastItem.current = false; // Сбрасываем флаг при изменении списка\n  }, [lastItemKey]);\n\n  return (\n    <RenderList\n      isGrid={isGrid}\n      items={items}\n      lastItemRef={lastItemRef}\n      onLastItemChanged={setLastItemKey}\n    />\n  );\n};\n\nexport default RenderListObserver;\n","// extracted by mini-css-extract-plugin\nexport default {\"category\":\"CategoryCard-module_category-EaJMh\"};","import React from 'react';\nimport { Button, Space } from 'antd';\nimport styles from './CategoryCard.module.scss';\nimport { Category } from '../types/category';\n\ninterface CategoryCardProps {\n  category: Category;\n  onClick?: () => void;\n  onRemove?: () => void;\n  onEdit?: () => void;\n}\n\nexport const CategoryCard: React.FC<CategoryCardProps> = ({\n  category,\n  onClick,\n  onRemove,\n  onEdit,\n}) => {\n  const handleClick = (): void => {\n    if (onClick) {\n      onClick();\n    }\n  };\n\n  return (\n    <div className={styles.category} onClick={handleClick}>\n      {category.photo && <img src={category.photo} alt={category.name} />}\n      <h3>{category.name}</h3>\n      <Space>\n        {onEdit && <Button onClick={onEdit}>Edit</Button>}\n        {onRemove && (\n          <Button danger onClick={onRemove}>\n            Delete\n          </Button>\n        )}\n      </Space>\n    </div>\n  );\n};\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useGetCategoriesQuery } from 'src/entities/Category';\nimport { convertToIRenderItem } from 'src/entities/Category/ui/convertToRenderItem';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { IRenderItem } from 'src/shared/ui/RenderList/RenderList';\n\nconst PAGE_SIZE = 10;\n\nexport const useLoaderCategories = () => {\n  const loadedPages = useRef<number[]>([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [categories, setCategories] = useState<IRenderItem[]>([]);\n  const { data, isFetching, isLoading, error, refetch } = useGetCategoriesQuery(\n    { pagination: { pageSize: PAGE_SIZE, pageNumber: pageNumber } },\n    {\n      skip: pageNumber === 0 || loadedPages.current.includes(pageNumber),\n    },\n  );\n  const { errorElement } = useErrorHandler({ error });\n\n  const handleLastItem = useCallback(() => {\n    if (!hasMore || isFetching) return;\n    setPageNumber((prev) => {\n      return prev + 1;\n    });\n  }, [hasMore, isFetching]);\n\n  useEffect(() => {\n    if (isLoading && isFetching) {\n      setCategories([]);\n    }\n  }, [isFetching, isLoading]);\n\n  useEffect(() => {\n    if (\n      data &&\n      data.data.length > 0 &&\n      !loadedPages.current.includes(pageNumber) &&\n      data.pagination.pageNumber === pageNumber\n    ) {\n      loadedPages.current.push(pageNumber);\n      setCategories((prev) => [\n        ...prev,\n        ...data.data.map((category) => {\n          return convertToIRenderItem({\n            category,\n            onClick: () => console.log(`Category ${category.name} clicked`),\n          });\n        }),\n      ]);\n    } else if (data && data.data.length < PAGE_SIZE) {\n      setHasMore(false);\n    }\n  }, [data, pageNumber]);\n\n  return {\n    hasMore,\n    categories,\n    errorElement,\n    refetch,\n    handleLastItem,\n  };\n};\n","import RenderListObserver from 'src/shared/ui/RenderList/RenderListObserver';\nimport styles from './CategoryList.module.scss';\nimport { useLoaderCategories } from '../model/useLoaderCategories';\n\nconst CategoryList: React.FC = () => {\n  const { hasMore, categories, errorElement, handleLastItem } = useLoaderCategories();\n  return (\n    <div className={styles.container}>\n      {errorElement}\n      <RenderListObserver isGrid={true} items={categories} onLastItem={handleLastItem} />\n      {!hasMore && <p className={styles.end}>Все категории загружены</p>}\n    </div>\n  );\n};\n\nexport default CategoryList;\n","import { IRenderItem } from 'src/shared/ui/RenderList/RenderList';\nimport { CategoryCard } from './CategoryCard';\nimport { Category } from '../types/category';\n\ninterface ConvertProps {\n  category: Category;\n  onClick?: (id: string) => void;\n  onEdit?: (id: string) => void;\n  onDelete?: (id: string) => void;\n}\n\nexport const convertToIRenderItem = ({\n  category,\n  onClick,\n  onEdit,\n  onDelete,\n}: ConvertProps): IRenderItem => ({\n  key: category.id,\n  render: () => (\n    <CategoryCard\n      category={category}\n      onClick={onClick ? () => onClick(category.id) : undefined}\n      onEdit={onEdit ? () => onEdit(category.id) : undefined}\n      onRemove={onDelete ? () => onDelete(category.id) : undefined}\n    />\n  ),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"CategoryList-module_container-JHTbf\",\"end\":\"CategoryList-module_end-M57dM\"};","import CategoryList from 'src/features/CategoryList/ui/CategoryList';\n\nconst CategoryPage: React.FC = () => {\n  return <CategoryList />;\n};\n\nexport default CategoryPage;\n","import { useEffect } from 'react';\nimport { FormInstance, message } from 'antd';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        messageApi.error(joinedMessage);\n      }\n    }\n  }, [error, form, messageApi]);\n\n  return {\n    errorElement: contextHolder,\n  };\n};\n"],"names":["RenderList","isGrid","items","lastItemRef","onLastItemChanged","length","className","empty","memoItems","map","item","index","MemoizedListItem","ref","setRefForLast","key","list","listGrid","ListItem","forwardRef","id","listItem","render","displayName","memo","element","current","onLastItem","lastItemKey","setLastItemKey","useState","prevLastItemKey","useRef","hasCalledOnLastItem","handleIntersection","useCallback","entries","entry","isIntersecting","useEffect","observer","IntersectionObserver","threshold","currentLastItem","observe","unobserve","CategoryCard","category","onClick","onRemove","onEdit","photo","src","alt","name","danger","hasMore","categories","errorElement","handleLastItem","loadedPages","pageNumber","setPageNumber","setHasMore","setCategories","data","isFetching","isLoading","error","refetch","pagination","pageSize","skip","includes","useErrorHandler","u","prev","push","onDelete","undefined","convertToIRenderItem","console","log","useLoaderCategories","form","messageApi","contextHolder","useMessage","setFields","joinedMessage"],"sourceRoot":""}
{"version":3,"file":"28.2165d081c4d9b3f4ffc8.js","mappings":"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","sources":["webpack://app-store/./src/features/ProductList/ui/ProductList.module.scss?e0d1","webpack://app-store/./src/features/ProductList/ui/ProductList.tsx","webpack://app-store/./src/pages/ProductPage/ProductPage.tsx","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/shared/hooks/useMessage.ts","webpack://app-store/./src/shared/hooks/usePaginationData.ts","webpack://app-store/./src/shared/ui/RenderList/RenderList.module.scss?5ddc","webpack://app-store/./src/shared/ui/RenderList/RenderList.tsx","webpack://app-store/./src/shared/ui/RenderList/RenderListObserver.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProductList-module_container-N0fil\",\"end\":\"ProductList-module_end-mjnfC\"};","import { useCallback } from 'react';\nimport { Divider, Spin } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { Product, useGetProductsQuery, convertToIRenderItem } from 'src/entities/Product';\nimport { ROUTES } from 'src/shared/config/routes';\nimport { usePaginatedData } from 'src/shared/hooks/usePaginationData';\nimport RenderListObserver from 'src/shared/ui/RenderList/RenderListObserver';\nimport styles from './ProductList.module.scss';\n\ninterface ProductListProps {\n  categoryId: string;\n}\n\nconst ProductList: React.FC<ProductListProps> = ({ categoryId }) => {\n  const navigate = useNavigate();\n\n  const fetchFunction = useCallback(\n    (pagination: { pageSize: number; pageNumber: number }, skip: boolean) => {\n      return useGetProductsQuery(\n        {\n          pagination,\n          categoryIds: [categoryId],\n          sorting: { type: 'ASC', field: 'createdAt' },\n        },\n        { skip },\n      );\n    },\n    [categoryId],\n  );\n\n  const convertItem = useCallback(\n    (product: Product) => {\n      return convertToIRenderItem({\n        product,\n        onClick: () => navigate(`${ROUTES.products.basePath}${product.id}`),\n      });\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  );\n\n  const { hasMore, isFetching, items, handleLastItem } = usePaginatedData({\n    fetchFunction,\n    convertItem,\n  });\n\n  return (\n    <div className={styles.container}>\n      <RenderListObserver items={items} onLastItem={handleLastItem} />\n      {!hasMore && <p className={styles.end}>Все категории загружены</p>}\n      {isFetching && <Divider />}\n      {isFetching && <Spin />}\n    </div>\n  );\n};\n\nexport default ProductList;\n","import { useParams } from 'react-router-dom';\nimport ProductList from 'src/features/ProductList/ui/ProductList';\n\nconst CategoryPage: React.FC = () => {\n  const { categoryId } = useParams<{ categoryId: string }>();\n  return <ProductList categoryId={categoryId!} />;\n};\n\nexport default CategoryPage;\n","import { useEffect } from 'react';\nimport { FormInstance } from 'antd';\nimport { useMessage } from 'src/shared/hooks/useMessage';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const { showError } = useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        showError(joinedMessage);\n      }\n    }\n  }, [error, form, showError]);\n};\n","import { useContext } from 'react';\nimport { MessageContext } from 'src/shared/providers/MessageContext';\n\nexport const useMessage = () => {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessage должен использоваться внутри <MessageProvider>');\n  }\n  return context;\n};\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useErrorHandler } from '../api/errors/useErrorHandler';\nimport { IRenderItem } from '../ui/RenderList/IRenderItem';\n\nconst PAGE_SIZE = 10;\n\nexport interface PaginatedResponse<TData> {\n  data: TData[];\n  pagination: {\n    pageSize: number;\n    pageNumber: number;\n    total: number;\n  };\n  sorting: {\n    type: 'ASC' | 'DESC';\n    field: 'id' | 'createdAt' | 'updatedAt' | 'name';\n  };\n}\n\ninterface UsePaginationDataProps<TData> {\n  fetchFunction: (\n    pagination: { pageSize: number; pageNumber: number },\n    skip: boolean,\n  ) => {\n    data?: PaginatedResponse<TData>;\n    isFetching: boolean;\n    isLoading: boolean;\n    error?: unknown;\n    refetch: () => void;\n  };\n  convertItem: (item: TData) => IRenderItem;\n}\n\nexport const usePaginatedData = <TData>({\n  fetchFunction,\n  convertItem,\n}: UsePaginationDataProps<TData>) => {\n  const loadedPages = useRef<number[]>([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [items, setItems] = useState<IRenderItem[]>([]);\n  const { data, isFetching, isLoading, error, refetch } = fetchFunction(\n    { pageSize: PAGE_SIZE, pageNumber: pageNumber },\n    pageNumber === 0 || loadedPages.current.includes(pageNumber),\n  );\n\n  useErrorHandler({ error });\n\n  const handleLastItem = useCallback(() => {\n    if (!hasMore || isFetching) return;\n    setPageNumber((prev) => prev + 1);\n  }, [hasMore, isFetching]);\n\n  useEffect(() => {\n    if (isLoading && isFetching) {\n      setItems([]);\n    }\n  }, [isFetching, isLoading]);\n\n  useEffect(() => {\n    if (\n      data &&\n      data.data.length > 0 &&\n      !loadedPages.current.includes(pageNumber) &&\n      data.pagination.pageNumber === pageNumber\n    ) {\n      loadedPages.current.push(pageNumber);\n      setItems((prev) => [...prev, ...data.data.map((item) => convertItem(item))]);\n    } else if (data && data.data.length < PAGE_SIZE) {\n      setHasMore(false);\n    }\n  }, [convertItem, data, pageNumber]);\n\n  return {\n    isFetching,\n    hasMore,\n    items,\n    refetch,\n    handleLastItem,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"listGrid\":\"RenderList-module_listGrid-VEEh9\",\"listItem\":\"RenderList-module_listItem-d2Xxn\"};","import React, { forwardRef, memo } from 'react';\nimport { IRenderItem } from './IRenderItem';\nimport styles from './RenderList.module.scss';\n\nexport interface IRenderListProps {\n  items: IRenderItem[];\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n  onLastItemChanged: (key: string) => void;\n}\n\nexport const RenderList: React.FC<IRenderListProps> = ({\n  items,\n  lastItemRef,\n  onLastItemChanged,\n}) => {\n  if (items.length === 0) {\n    return <div className={styles.empty}>No items to display</div>;\n  }\n\n  return (\n    <ul className={styles.listGrid}>\n      {items.map((item, index) => (\n        <ItemMemo\n          key={item.key}\n          item={item}\n          ref={setRefForLast({ items, index, lastItemRef, onLastItemChanged })}\n        />\n      ))}\n    </ul>\n  );\n};\n\ntype ListItemProps = {\n  item: IRenderItem;\n};\n\nconst ItemRef = forwardRef<HTMLLIElement, ListItemProps>(({ item }, ref) => (\n  <li id={item.key} ref={ref} className={styles.listItem}>\n    {item.render()}\n  </li>\n));\nItemRef.displayName = 'ItemRef';\n\nconst ItemMemo = memo(ItemRef);\n\nconst setRefForLast = ({\n  items,\n  index,\n  lastItemRef,\n  onLastItemChanged,\n}: {\n  items: IRenderItem[];\n  index: number;\n  onLastItemChanged: (key: string) => void;\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n}) => {\n  return (element: HTMLLIElement | null) => {\n    if (index === items.length - 1 && lastItemRef) {\n      lastItemRef.current = element;\n      onLastItemChanged(items[items.length - 1].key);\n    }\n  };\n};\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport { IRenderItem } from './IRenderItem';\nimport { RenderList } from './RenderList';\n\nexport interface IRenderListObserverProps {\n  items: IRenderItem[];\n  onLastItem: () => void;\n}\n\nconst RenderListObserver: React.FC<IRenderListObserverProps> = ({ items, onLastItem }) => {\n  const [lastItemKey, setLastItemKey] = useState('');\n  const prevLastItemKey = useRef('');\n  const lastItemRef = useRef<HTMLLIElement | null>(null);\n  const hasCalledOnLastItem = useRef(false);\n\n  const handleIntersection = useCallback(\n    (entries: IntersectionObserverEntry[]) => {\n      const entry = entries[0];\n      if (entry?.isIntersecting && !hasCalledOnLastItem.current) {\n        hasCalledOnLastItem.current = true;\n        onLastItem();\n      }\n    },\n    [onLastItem],\n  );\n\n  useEffect(() => {\n    if (lastItemKey === prevLastItemKey.current) {\n      return;\n    } else {\n      prevLastItemKey.current = lastItemKey;\n    }\n\n    const observer = new IntersectionObserver(handleIntersection, { threshold: 0.5 });\n\n    const currentLastItem = lastItemRef.current;\n    if (currentLastItem) {\n      observer.observe(currentLastItem);\n    }\n\n    return () => {\n      if (currentLastItem) {\n        observer.unobserve(currentLastItem);\n      }\n    };\n  }, [handleIntersection, lastItemKey]);\n\n  useEffect(() => {\n    hasCalledOnLastItem.current = false;\n  }, [lastItemKey]);\n\n  return <RenderList items={items} lastItemRef={lastItemRef} onLastItemChanged={setLastItemKey} />;\n};\n\nexport default RenderListObserver;\n"],"names":["categoryId","navigate","fetchFunction","useCallback","pagination","skip","categoryIds","sorting","type","field","convertItem","product","onClick","products","basePath","id","hasMore","isFetching","items","handleLastItem","className","RenderListObserver","onLastItem","useErrorHandler","form","error","showError","useEffect","setFields","joinedMessage","useMessage","context","useContext","Error","usePaginatedData","loadedPages","useRef","pageNumber","setPageNumber","useState","setHasMore","setItems","data","isLoading","refetch","pageSize","current","includes","u","prev","length","push","map","item","RenderList","lastItemRef","onLastItemChanged","empty","listGrid","index","ItemMemo","ref","setRefForLast","key","ItemRef","forwardRef","listItem","render","displayName","memo","element","lastItemKey","setLastItemKey","prevLastItemKey","hasCalledOnLastItem","handleIntersection","entries","entry","isIntersecting","observer","IntersectionObserver","threshold","currentLastItem","observe","unobserve"],"sourceRoot":""}